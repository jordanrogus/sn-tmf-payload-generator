<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_648117_tmf_mock.TMFAPISubmissionService</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Set of functions to support sending API request(s) from a Payload Generator record.</description>
        <name>TMFAPISubmissionService</name>
        <script><![CDATA[var TMFAPISubmissionService = Class.create();
TMFAPISubmissionService.prototype = {
    initialize: function() {
        this.utilsSI = new x_648117_tmf_mock.Utils();
    },

    /**
     * Submits a payload against the TMF 622 Product Order API synchronously from a Payload Generator record
     * 
     * @param payloadGeneratorSysId {string} - Payload Generator record to query
     * @return {object} - Object containing a message and a boolean denoting API error
     **/
    tmf622productOrderPostSubmitSynch(payloadGeneratorSysId) {
        if (typeof(payloadGeneratorSysId) != "string") {
            return null;
        }

        var instanceUrl = gs.getProperty('glide.servlet.uri');
        var payloadGeneratorGr = this.utilsSI.getRecordFromSysId('x_648117_tmf_mock_payload_generator', payloadGeneratorSysId);

        var request = new sn_ws.RESTMessageV2();
        request.setEndpoint(instanceUrl + 'api/sn_ind_tmt_orm/order/productOrder');
        request.setHttpMethod('POST');
        var queryParams = this._getQueryParams(payloadGeneratorSysId);
        if (queryParams.length > 0) {
            for (var i = 0; i < queryParams.length; i++) {
                request.setQueryParameter(queryParams[i].name, queryParams[i].value);
            }
        }
        request.setAuthenticationProfile('basic', gs.getProperty('x_648117_tmf_mock.basic_auth_config'));
        request.setRequestHeader("Accept", "application/json");
        request.setRequestBody(payloadGeneratorGr.getValue('payload').toString());
        var response = request.execute();

        var statusCode = response.getStatusCode();
        var responseBody = JSON.parse(response.getBody());
        var id = '';
        var url = '';
        var link = '';
        var msg = '';
        var error_msg = '';
        var error = false;
        if (statusCode == '201') {
            id = responseBody.id.toString();
            url = "/sn_ind_tmt_orm_order?sys_id=" + id;
            link = '<a href="' + url + '" target="_blank">Click Here!</a>';
            msg = "Order was generated. Link in a new tab: " + link;
        } else if (statusCode == '202') {
            id = responseBody.orderId.toString();
            msg = "Order was generated with a status of 202. The id of the order is: " + id;
        } else if (responseBody.details[0].message) {
            error = true;
            error_msg = JSON.stringify(responseBody.details);
            msg = "The API encountered the following error: " + error_msg;
            gs.error(gs.getMessage("The api/sn_ind_tmt_orm/order/productOrder API for ' + payloadGeneratorGr.getValue('number') + ' has error'd with status code: " + statusCode + ', and response body: ' + responseBody));
        } else {
            error = true;
            msg = "There was an error with the API. Please contact an admin to troubleshoot.";
            gs.error(gs.getMessage("The api/sn_ind_tmt_orm/order/productOrder API for ' + payloadGeneratorGr.getValue('number') + ' has error'd with status code: " + statusCode + ', and response body: ' + JSON.stringify(responseBody)));
        }

        return {
            msg: msg,
            error: error
        };
    },

    /**
     * Submits a payload against the TMF 622 Product Order API asynchronously from a Payload Generator record
     * 
     * @param payloadGeneratorSysId {string} - Payload Generator record to query
     * @return {null}
     **/
    tmf622productOrderPostSubmitAsynch(payloadGeneratorSysId) {
        if (typeof(payloadGeneratorSysId) != "string") {
            return null;
        }

        var instanceUrl = gs.getProperty('glide.servlet.uri');
        var payloadGeneratorGr = this.utilsSI.getRecordFromSysId('x_648117_tmf_mock_payload_generator', payloadGeneratorSysId);

        var request = new sn_ws.RESTMessageV2();
        request.setEndpoint(instanceUrl + 'api/sn_ind_tmt_orm/order/productOrder');
        request.setHttpMethod('POST');
        var queryParams = this._getQueryParams(payloadGeneratorSysId);
        if (queryParams.length > 0) {
            for (var i = 0; i < queryParams.length; i++) {
                request.setQueryParameter(queryParams[i].name, queryParams[i].value);
            }
        }
        request.setAuthenticationProfile('basic', gs.getProperty('x_648117_tmf_mock.basic_auth_config'));
        request.setRequestHeader("Accept", "application/json");
        request.setRequestBody(payloadGeneratorGr.getValue('payload').toString());
        var response = request.executeAsync();
    },

    /**
     * Get the API Trigger Quantity API parameter
     * 
     * @param payloadGeneratorSysId {string} - Payload Generator record to query
     * @return {integer} - The value of the API Trigger Quantity API parameter, defaulting to 1
     **/
    getAPITriggerQuantity(payloadGeneratorSysId) {
        var quantity = 1; // Default to 1
        if (typeof(payloadGeneratorSysId) != "string") {
            return quantity;
        }

        var utilsSI = new x_648117_tmf_mock.Utils();
        var apiParamsGr = utilsSI.getRecords('x_648117_tmf_mock_api_parameters', 'payload_generator=' + payloadGeneratorSysId + '^query_param=api_trigger_quantity');
        if (apiParamsGr) {
            if (apiParamsGr.next()) {
                var value = apiParamsGr.getValue('query_param_value');
                if (!value) {
                    return quantity;
                }
                if (!isNaN(value)) {
                    quantity = parseInt(value);
                }
            }
        }
        return quantity;
    },

    /**
     * Get all query params from a payload generator record
     * 
     * @param payloadGeneratorSysId {string} - Payload Generator record to query
     * @return {array} - Array of query params stored as objects of name/value pairs
     **/
    _getQueryParams(payloadGeneratorSysId) {
        var array = [];
        var utilsSI = new x_648117_tmf_mock.Utils();
        var apiParamsGr = utilsSI.getRecords('x_648117_tmf_mock_api_parameters', 'payload_generator=' + payloadGeneratorSysId + '^type=query');
        if (apiParamsGr) {
            while (apiParamsGr.next()) {
                if (!apiParamsGr.query_param_value.nil()) {
                    var obj = {
                        name: apiParamsGr.getValue('query_param').toString(),
                        value: apiParamsGr.getValue('query_param_value').toString()
                    };
                    array.push(obj);
                }
            }
        }
        return array;
    },

    type: 'TMFAPISubmissionService'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-06-29 19:47:23</sys_created_on>
        <sys_id>f8c279a047372110acf69a21336d43af</sys_id>
        <sys_mod_count>28</sys_mod_count>
        <sys_name>TMFAPISubmissionService</sys_name>
        <sys_package display_value="TMF Mock Payload Generator" source="x_648117_tmf_mock">3b03be1447232110acf69a21336d4362</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="TMF Mock Payload Generator">3b03be1447232110acf69a21336d4362</sys_scope>
        <sys_update_name>sys_script_include_f8c279a047372110acf69a21336d43af</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-07-06 19:29:34</sys_updated_on>
    </sys_script_include>
</record_update>
