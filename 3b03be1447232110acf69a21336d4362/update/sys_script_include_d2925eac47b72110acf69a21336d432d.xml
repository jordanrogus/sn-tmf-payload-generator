<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_648117_tmf_mock.ItemCharacteristicUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Utility functions for the Item Characteristic (x_648117_tmf_mock_item_characteristic) table.</description>
        <name>ItemCharacteristicUtils</name>
        <script><![CDATA[var ItemCharacteristicUtils = Class.create();
ItemCharacteristicUtils.prototype = {
    initialize: function() {
        this.utils = new x_648117_tmf_mock.Utils();
    },
	
	/**
     * Delete exisiting item characteristics
     * 
     * @param {string} item - Sys_id of the item
     * @returns {undefined} - Function does not return
     **/
	deleteExisitingItemChars(item){
		var itemCharacteristicGr = new GlideRecord('x_648117_tmf_mock_item_characteristic');
		itemCharacteristicGr.addQuery('item', item);
		itemCharacteristicGr.query();
		itemCharacteristicGr.deleteMultiple();
	},

	/**
     * Generate item characteristics
     * 
     * @param {string} item - Sys_id of the item
     * @param {string} productOffering - Sys_id of the product offering
     * @param {string} specification - Sys_id of the specification
     * @param {string} populateData - Boolean denoting if data should be populated
     * @returns {undefined} - Function does not return
     **/
    generateItemChars(item, productOffering, specification, populateData) {
        var characteristics = this.getProductOfferingCharacteristics(productOffering, specification);
        if (characteristics) {
            for (i = 0; i < characteristics.length; i++) {
                var itemCharacteristicGr = new GlideRecord('x_648117_tmf_mock_item_characteristic');
                itemCharacteristicGr.addQuery('item', item);
                itemCharacteristicGr.addQuery('characteristic', characteristics[i].characteristic);
                itemCharacteristicGr.query();
                if (!itemCharacteristicGr.next()) {
                    this.generateItemCharacteristic(characteristics[i], item, populateData);
                }
            }
        }
    },

    /**
     * Retrieves product offering characteristics
     * 
     * @param {string} productOffering - Sys_id of the product offering to query
     * @param {string specification} - Sys_id of the specification to query
     * @returns {Object[]} characteristics - Characteristics as an array of objects
	 * @returns {string} characteristics[].characteristic - The name of the characteristic
	 * @returns {boolean} characteristics[].mandatory - If the characteristic is mandatory
	 * @returns {?Array} characteristics[].options - The characteristic options as an array
     **/
    getProductOfferingCharacteristics(productOffering, specification) {
        if (typeof(productOffering) !== "string" || typeof(specification) !== "string") {
            return null;
        }

        var characteristics = [];
        var productOfferingCharGr = this.utils.getRecords('sn_prd_pm_product_offering_characteristic', 'product_offering=' + productOffering + '^specification=' + specification);
        if (productOfferingCharGr) {
            while (productOfferingCharGr.next()) {
                var charFound = false;

                // Check if an object in the chars array already has the characteristic. If so, and the characteristic uses choices, add the choice to the object
                for (i = 0; i < characteristics.length; i++) {
                    if (characteristics[i].characteristic === productOfferingCharGr.getValue('characteristic')) {
                        charFound = true;
                        if (this._checkToUpdateCharacteristicOptions(productOfferingCharGr, characteristics[i])) {
                            characteristics[i].options.push(productOfferingCharGr.getDisplayValue('characteristic_option'));
                        }
                    }
                }

                if (!charFound) {
                    characteristics.push(this._generateCharMapObj(productOfferingCharGr));
                }
            }
        }
        return characteristics;
    },

    /**
     * Determines if the characteristic option needs to be updated
     * 
     * @param {GlideRecord Object} productOfferingCharsGr - Product offering characteristic
     * @param {Object[]} characteristicObj - Characteristics as an array of objects
	 * @param {string} characteristicObj[].characteristic - The name of the characteristic
	 * @param {boolean} characteristicObj[].mandatory - If the characteristic is mandatory
	 * @param {?Array} characteristicObj[].options - The characteristic options as an array
     * @returns {boolean} - True or False based on the check. True denotes the characteristic option does not exist and should be added
     **/
    _checkToUpdateCharacteristicOptions(productOfferingCharsGr, characteristicObj) {
        var result = false;
		if (characteristicObj.options.indexOf(productOfferingCharsGr.getDisplayValue('characteristic_option')) === -1) {
            result = true;
        }
        return result;
    },

    /**
     * Generates an object for a characteristic
     * 
     * @param {GlideRecord Object} productOfferingCharsGr - Product offering characteristic
     * @returns {Object[]} characteristicObj - Characteristics as an array of objects
	 * @returns {string} characteristicObj[].characteristic - The name of the characteristic
	 * @returns {boolean} characteristicObj[].mandatory - If the characteristic is mandatory
	 * @returns {?Array} characteristicObj[].options - The characteristic options as an array     **/
    _generateCharMapObj(productOfferingCharsGr) {
        var characteristicObj = {};
        characteristicObj.characteristic = productOfferingCharsGr.getValue('characteristic');
        characteristicObj.mandatory = productOfferingCharsGr.getValue('is_mandatory');
        if (productOfferingCharsGr.getValue('characteristic_option') !== null) {
            characteristicObj.options = [productOfferingCharsGr.getDisplayValue('characteristic_option')];
        }
        return characteristicObj;
    },

    /**
     * Generates a record for the item characteristic
     * 
     * @param {GlideRecord Object} productOfferingCharsGr - Product offering characteristic
     * @param {string} item - Sys_id of the item
     * @param {boolean} populateData - User input if data should be auto-generated for all characteristics
     * @returns {null|undefined} - Function does not return unless invalid parameter passed in
     **/
    generateItemCharacteristic(characteristicObj, item, populateData) {
        if (typeof(characteristicObj) !== "object" || typeof(item) !== "string" || typeof(populateData) !== "string") {
            return null;
        }

        var itemCharacteristicGr = new GlideRecord('x_648117_tmf_mock_item_characteristic');
        itemCharacteristicGr.newRecord();
        itemCharacteristicGr.characteristic = characteristicObj.characteristic;
        itemCharacteristicGr.item = item;
		
        // Generate a characteristic value if the user asked for all to be generated or the characteristic is mandatory. 
		// Booleans in SN stored as string values of 0 or 1, so check if passed through as "1" or "true"
        if ((populateData === "1" || populateData === "true") || characteristicObj.mandatory === "1") {
            itemCharacteristicGr.characteristic_value = this._generateCharacteristicValue(characteristicObj);
        }
        itemCharacteristicGr.insert();
    },

    /**
     * Generates a random characteristic value 
     * @param {Object[]} characteristicObj - Characteristics as an array of objects
	 * @param {string} characteristicObj[].characteristic - The name of the characteristic
	 * @param {boolean} characteristicObj[].mandatory - If the characteristic is mandatory
	 * @param {?Array} characteristicObj[].options - The characteristic options as an array
     * @returns {string} - The characteristic value
     **/
    _generateCharacteristicValue(characteristicObj) {
        if (characteristicObj.hasOwnProperty('options') === true) {
            return characteristicObj.options[this.utils.getRandomIntFromInterval(0, characteristicObj.options.length - 1)];
        } else {
            return this.utils.generateRandomString(10);
        }
    },
    type: 'ItemCharacteristicUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-06-29 21:58:17</sys_created_on>
        <sys_id>d2925eac47b72110acf69a21336d432d</sys_id>
        <sys_mod_count>54</sys_mod_count>
        <sys_name>ItemCharacteristicUtils</sys_name>
        <sys_package display_value="TMF Mock Payload Generator" source="x_648117_tmf_mock">3b03be1447232110acf69a21336d4362</sys_package>
        <sys_policy/>
        <sys_scope display_value="TMF Mock Payload Generator">3b03be1447232110acf69a21336d4362</sys_scope>
        <sys_update_name>sys_script_include_d2925eac47b72110acf69a21336d432d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-10-25 15:22:49</sys_updated_on>
    </sys_script_include>
</record_update>
