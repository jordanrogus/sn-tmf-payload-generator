<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_648117_tmf_mock.TMFProductOrderPayloadGenerationService</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Set of functions to support populating a TMF622 compliant payload for a Payload Generator record.</description>
        <name>TMFProductOrderPayloadGenerationService</name>
        <script><![CDATA[var TMFProductOrderPayloadGenerationService = Class.create();
TMFProductOrderPayloadGenerationService.prototype = {
    initialize: function() {
        this.utils = new x_648117_tmf_mock.Utils();
        this.tmfPayloadUtils = new x_648117_tmf_mock.TMFPayloadUtils();
    },
	
	/**
     * Determines helper function to run based on the TMF622 method selected in the payload generator
     * 
     * @param {GlideRecord Object} payloadGeneratorGr - The payload generator record
     * @returns {null|undefined} - Function does not return unless invalid parameter passed in
     **/
    initializePayloadGenerator(payloadGeneratorGr) {
		if(!payloadGeneratorGr.isValidField('method_and_endpoint')){
			return null;
		}

        var api = payloadGeneratorGr.getValue('method_and_endpoint');
        switch (api) {
            case "post_sn_ind_tmt_orm_order_productOrder":
                return this._generatePayload(payloadGeneratorGr.getUniqueValue());
			default:
				gs.error(gs.getMessage("Switch statement in 'TMFProductOrderPayloadGenerationService' Script Include found no match"));
        }
    },

    /**
     * Generates the TMF622 compliant payload
     * 
     * @param {string} payloadGeneratorSysId - The payload generator record to use in generating the payload
     * @returns {string} - The TMF622 compliant payload
     **/
    _generatePayload(payloadGeneratorSysId) {
        var payload = {};
        var rootElements = ['orderCurrency', 'externalId', 'requestedCompletionDate', 'requestedStartDate'];
        var noteArray = [];
        var channel = '';
        var account = '';
        var contact = '';

        var coreOrderDataGr = this.utils.getRecords('x_648117_tmf_mock_core_order_data', 'payload_generator=' + payloadGeneratorSysId);
        if (coreOrderDataGr) {
            while (coreOrderDataGr.next()) {
                var attribute = coreOrderDataGr.getValue('attribute');
                var attributeValue = coreOrderDataGr.getValue('value');
                var recordValue = coreOrderDataGr.getValue('record');

                if (rootElements.indexOf(attribute) > -1) {
                    if (attributeValue) {
                        payload[attribute] = attributeValue;
                    }
                }

                if (attribute === 'channel') {
                    channel = recordValue;
                }
                if (attribute === 'note' && attributeValue !== null) {
                    noteArray.push({
                        "text": attributeValue
                    });
                }
                if (attribute === 'account') {
                    account = recordValue;
                }
                if (attribute === 'contact') {
                    contact = recordValue;
                }
            }
        }
		if (noteArray.length > 0){
			payload.note = noteArray;
		}
		if (this._generateProductOrderItemArray(payloadGeneratorSysId).length > 0){
			payload.productOrderItem = this._generateProductOrderItemArray(payloadGeneratorSysId);
		}
		if (Array.isArray(this.tmfPayloadUtils.generateRelatedPartyArray(contact, account))){
			payload.relatedParty = this.tmfPayloadUtils.generateRelatedPartyArray(contact, account);	
		}
		if (Array.isArray(this.tmfPayloadUtils.generateChannelArray(channel))){
			payload.channel = this.tmfPayloadUtils.generateChannelArray(channel);
		}
        payload['@type'] = 'ProductOrder';
        return JSON.stringify(payload);
    },

    /**
     * Generates the product order item array for TMF622
     * 
     * @param {string} payloadGeneratorSysId - The payload generator record to use in generating the array
     * @returns {Array} - The product order item array
     **/
    _generateProductOrderItemArray(payloadGeneratorSysId) {
        var array = [];
        var orderableItemsGr = this.utils.getRecords('x_648117_tmf_mock_items', 'payload_generator=' + payloadGeneratorSysId);
        if (orderableItemsGr) {
            while (orderableItemsGr.next()) {
				// Boolean is stored as string of 0 or 1
                if (orderableItemsGr.getValue('unique_line_item') === "1") {
                    for (i = 1; i < parseInt(orderableItemsGr.getValue('quantity')) + 1; i++) {
                        array.push(this._generateProductOrderItemObj(orderableItemsGr, i));
                    }
                } else {
                    array.push(this._generateProductOrderItemObj(orderableItemsGr));
                }
            }
        }
        return array;
    },

    /**
     * Generates the product order item object for an item
     * @param {GlideRecord Object} orderableItemsGr - The item used in generating the object
     * @param {integer} [i] - Optionally, an iterator to ensure duplicate items have unique ids
     * @returns {Object} - The product order item object
     **/
    _generateProductOrderItemObj(orderableItemsGr, i) {
        var obj = {};
        obj.action = orderableItemsGr.getValue('action');
		// Boolean is stored as string of 0 or 1
        if (orderableItemsGr.getValue('unique_line_item') === "1") {
            if ((i != "") && (i != null)) {
                obj.id = orderableItemsGr.getUniqueValue() + '_' + i;
            } else {
                obj.id = orderableItemsGr.getUniqueValue();
            }
            obj.quantity = 1;
        } else {
            obj.id = orderableItemsGr.getUniqueValue();
            obj.quantity = orderableItemsGr.getValue('quantity');
        }

        if (this.tmfPayloadUtils.checkForPrice(orderableItemsGr) === true) {
            var itemPriceArray = [];
            if (orderableItemsGr.getValue('mrc') !== "0") {
                itemPriceArray.push(this.tmfPayloadUtils.generateItemPriceObj(orderableItemsGr, 'mrc'));
            }
            if (orderableItemsGr.getValue('nrc') !== "0") {
                itemPriceArray.push(this.tmfPayloadUtils.generateItemPriceObj(orderableItemsGr, 'nrc'));
            }
            obj.itemPrice = itemPriceArray;
        }
        obj.product = this._generateProductObj(orderableItemsGr);
        obj.productOffering = this.tmfPayloadUtils.generateProductOfferingObj(orderableItemsGr.getValue('product_offering'));
        if (this.tmfPayloadUtils.checkForProductOrderItemRelationship(orderableItemsGr) === true) {
            obj.productOrderItemRelationship = this.tmfPayloadUtils.generateProductOrderItemRelationshipArray(orderableItemsGr);
        }
        obj["@type"] = "ProductOrderItem";
        return obj;
    },

    /**
     * Generates the product object for an item
     * @param {GlideRecord Object} orderableItemsGr - The item used in generating the object
     * @returns {Object} - The product object
     **/
    _generateProductObj(orderableItemsGr) {
        var obj = {};
        if (orderableItemsGr.getValue('action') !== "add") {
            obj.id = this.tmfPayloadUtils.getRecordIdentifier('sn_prd_invt_product_inventory', orderableItemsGr.getValue('product_inventory'));
        }
        obj["@type"] = "Product";
        if (this.tmfPayloadUtils.checkForProductCharacteristics(orderableItemsGr) === true) {
            obj.productCharacteristic = this.tmfPayloadUtils.generateProductCharacteristicArray(orderableItemsGr);
        }
        obj.productSpecification = this.tmfPayloadUtils.generateProductSpecificationObj(orderableItemsGr.getValue('specification'));
        if (!orderableItemsGr.location.nil()) {
            obj.place = this.tmfPayloadUtils.generatePlaceObj(orderableItemsGr.getValue('location'));
        }
        if (this.tmfPayloadUtils.checkForProductRelationship(orderableItemsGr) === true) {
            obj.productRelationship = this.tmfPayloadUtils.generateProductRelationshipArray(orderableItemsGr);
        }
        if (this.tmfPayloadUtils.checkForProductRelatedParty(orderableItemsGr) === true) {
            obj.relatedParty = this.tmfPayloadUtils.generateProductRelatedPartyArray(orderableItemsGr);
        }
        return obj;
    },
    type: 'TMFProductOrderPayloadGenerationService'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-06-22 21:56:29</sys_created_on>
        <sys_id>45fe4616476b2110acf69a21336d4312</sys_id>
        <sys_mod_count>108</sys_mod_count>
        <sys_name>TMFProductOrderPayloadGenerationService</sys_name>
        <sys_package display_value="TMF Mock Payload Generator" source="x_648117_tmf_mock">3b03be1447232110acf69a21336d4362</sys_package>
        <sys_policy/>
        <sys_scope display_value="TMF Mock Payload Generator">3b03be1447232110acf69a21336d4362</sys_scope>
        <sys_update_name>sys_script_include_45fe4616476b2110acf69a21336d4312</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-10-25 15:25:10</sys_updated_on>
    </sys_script_include>
</record_update>
