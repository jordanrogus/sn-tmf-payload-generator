<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_648117_tmf_mock.Utils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>A set of helper functions to support the TMF Mock Payload Generator application.</description>
        <name>Utils</name>
        <script><![CDATA[var Utils = Class.create();
Utils.prototype = {
    initialize: function() {},

    /**
     * Retrieves table records from a query
     * 
     * @param {string} tableName - Name of the table to query
     * @param {string} encodedQuery - Query formatted as an encoded query
     * @returns {GlideRecord Object} - Set of returned records in the GlideRecord object
     **/
    getRecords(tableName, encodedQuery) {
        if (!gs.tableExists(tableName)){
            return null;
        }

        var recordsGr = new GlideRecord(tableName);
        recordsGr.addEncodedQuery(encodedQuery);
        recordsGr.query();
        if (recordsGr.hasNext()) {
            return recordsGr;
        }
        return null;
    },

    /**
     * Retrieves a record from a table
     * 
     * @param {string} tableName - Name of the table to query
     * @param {string} sysId - Record sys_id to check against
     * @returns {GlideRecord Object} - The retrieved record in the GlideRecord object
     **/
    getRecordFromSysId(tableName, sysId) {
        if (!gs.tableExists(tableName)){
            return null;
        }

        var recordGr = new GlideRecord(tableName);
        if (recordGr.get(sysId)) {
            return recordGr;
        }
		return null;
    },

    /**
     * Checks if a record already exists in the table from a query
     * 
     * @param {string} tableName - Name of the table to query
     * @param {string} encodedQuery - Query formatted as an encoded query
     * @param {string} currentRecordSysId - Record sys_id to check against
     * @returns {?string} - Link to existing record if it exists
     **/
    checkForDuplicateRecord(tableName, encodedQuery, currentRecordSysId) {
         if (!gs.tableExists(tableName)){
            return null;
        }

        var recordCheckGr = new GlideRecord(tableName);
        recordCheckGr.addEncodedQuery(encodedQuery);
        recordCheckGr.query();
        if (recordCheckGr.next() && recordCheckGr.getUniqueValue() != currentRecordSysId) {
            var link = "/" + recordCheckGr.getTableName() + "?sys_id=" + recordCheckGr.getUniqueValue();
            return link.toString();
        }
        return null;
    },

    /**
     * Generates a duplicate record
     * 
     * @param {string} tableName - Name of the table to query
     * @param {string} sourceRecordSysId - Record sys_id to source data to generate the duplicated record
     * @param {object} fieldMap - Optional object containing fields/values to usurp from the source record in the duplicated record.
	 * @param {string} fieldMap.fieldName - Value for the field
     * @returns {string} - Sys_id of duplicated record
     **/
    generateDuplicateRecord(tableName, sourceRecordSysId, fieldMap) {
        if (!gs.tableExists(tableName)){
            return null;
        }

        var duplicateRecordGr = new GlideRecord(tableName);
        duplicateRecordGr.initialize();
        if (duplicateRecordGr.get(sourceRecordSysId)) {
            if (typeof fieldMap === "object") {
                for (var key in fieldMap) {
                    if (fieldMap.hasOwnProperty(key)) {
                        if (duplicateRecordGr.isValidField(key)) {
                            duplicateRecordGr[key] = fieldMap[key];
                        }
                    }
                }
            }
            if (duplicateRecordGr.isValidField('number')) {
                duplicateRecordGr.number = ""; // Clear number so SN can generate a new number
            }
            return duplicateRecordGr.insert();
        } else {
            return null;
        }
    },

    /**
     * Gets a random integer between min and max values
     * 
     * @param {number} min - Minimum integer to bound the generation
     * @param {number} max - Maximum integer to bound the generation
     * @returns {number} - Random integer
     **/
    getRandomIntFromInterval(min, max) {
        if (typeof(min) !== "number" || typeof(max) !== "number") {
            return null;
        }

        return Math.floor(Math.random() * (max - min + 1) + min);
    },

    /**
     * Generate a random string of a specified length
     * 
     * @param {integer} length - The length of the generated string
     * @returns {string} - Random string
     **/
    generateRandomString(length) {
        if (typeof(length) !== "number") {
            return null;
        }

        var result = '';
        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        var charactersLength = characters.length;
        var counter = 0;
        while (counter < length) {
            result += characters.charAt(Math.floor(Math.random() * charactersLength));
            counter += 1;
        }
        return result;
    },
    type: 'Utils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-06-22 18:26:52</sys_created_on>
        <sys_id>11fed15247672110acf69a21336d435a</sys_id>
        <sys_mod_count>43</sys_mod_count>
        <sys_name>Utils</sys_name>
        <sys_package display_value="TMF Mock Payload Generator" source="x_648117_tmf_mock">3b03be1447232110acf69a21336d4362</sys_package>
        <sys_policy/>
        <sys_scope display_value="TMF Mock Payload Generator">3b03be1447232110acf69a21336d4362</sys_scope>
        <sys_update_name>sys_script_include_11fed15247672110acf69a21336d435a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-10-24 22:37:34</sys_updated_on>
    </sys_script_include>
</record_update>
