<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_648117_tmf_mock.TMFPayloadUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Utility functions to be used across the TMF Payload Generation services.</description>
        <name>TMFPayloadUtils</name>
        <script><![CDATA[var TMFPayloadUtils = Class.create();
TMFPayloadUtils.prototype = {
    initialize: function() {
        this.utils = new x_648117_tmf_mock.Utils();
    },

    /**
     * Generates the TMF compliant channel array
     * 
     * @param {string} channelSysId - The channel record to use in generating the array as a sys_id
     * @returns {Array} - The TMF compliant channel array
     **/
    generateChannelArray(channelSysId) {
        var recordGr = this.utils.getRecordFromSysId('sn_prd_pm_distribution_channel', channelSysId);
        if (!recordGr) {
            return null;
        }

        return [{
            "id": this.getRecordIdentifier('sn_prd_pm_distribution_channel', channelSysId),
            "name": recordGr.getValue('name')
        }];
    },

    /**
     * Generates the TMF compliant related party array
     * 
     * @param {string} contactSysId - The contact record to use in generating the array as a sys_id
     * @param {string} accountSysId - The account record to use in generating the array as a sys_id
     * @returns {Array} - The TMF compliant related party array
     **/
    generateRelatedPartyArray(contactSysId, accountSysId) {
        var array = [];
        if (this._generateCustomerContactObj(contactSysId)) {
            array.push(this._generateCustomerContactObj(contactSysId));
        }
        if (this._generateCustomerObj(accountSysId)) {
            array.push(this._generateCustomerObj(accountSysId));
        }

        if (array.length === 0) {
            return null;
        } else {
            return array;
        }
    },

    /**
     * Generates the TMF compliant customer contact object
     * 
     * @param {string} contactSysId - The contact record to use in generating the object as a sys_id
     * @returns {Object} - The TMF compliant customer contact object
     **/
    _generateCustomerContactObj(contactSysId) {
        var recordGr = this.utils.getRecordFromSysId('customer_contact', contactSysId);
        if (!recordGr) {
            return null;
        }

        var obj = {};
        obj.id = this.getRecordIdentifier('customer_contact', contactSysId);
        obj.name = recordGr.getValue('name');
        obj['@type'] = 'RelatedParty';
        obj['@referredType'] = 'CustomerContact';
        return obj;
    },

    /**
     * Generates the TMF compliant customer object
     * 
     * @param {string} accountSysId - The account record to use in generating the object as a sys_id
     * @returns {Object} - The TMF compliant customer object
     **/
    _generateCustomerObj(accountSysId) {
        var recordGr = this.utils.getRecordFromSysId('customer_account', accountSysId);
        if (!recordGr) {
            return null;
        }

        var obj = {};
        obj.id = this.getRecordIdentifier('customer_account', accountSysId);
        obj.name = recordGr.getValue('name');
        obj['@type'] = 'RelatedParty';
        obj['@referredType'] = 'Customer';
        return obj;
    },

    /**
     * Determines if an item has characteristics
     * 
     * @param {GlideRecord Object} orderableItemGr - The item to check
     * @returns {boolean} - True/False denoting if the item has characteristics
     **/
    checkForProductCharacteristics(orderableItemGr) {
        var productCharacteristicsGr = this.utils.getRecords('x_648117_tmf_mock_item_characteristic', 'item=' + orderableItemGr.getUniqueValue());
        if (productCharacteristicsGr) {
            return true;
        }
        return false;
    },

    /**
     * Generates the TMF compliant product characteristic array
     * 
     * @param {GlideRecord Object} orderableItemGr - The item to use in generating the array
     * @returns {Array} - The TMF compliant product characteristic array
     **/
    generateProductCharacteristicArray(orderableItemGr) {
        var array = [];
        var productCharacteristicsGr = this.utils.getRecords('x_648117_tmf_mock_item_characteristic', 'item=' + orderableItemGr.getUniqueValue());
        if (productCharacteristicsGr) {
            while (productCharacteristicsGr.next()) {
                var characteristicDefinitionGr = this.utils.getRecordFromSysId('sn_prd_pm_characteristic', productCharacteristicsGr.getValue('characteristic'));
                array.push({
                    "name": characteristicDefinitionGr.getValue('name'),
                    "value": productCharacteristicsGr.getValue('characteristic_value')
                });
            }
        }
        return array;
    },

    /**
     * Generates the TMF compliant product specification object
     * 
     * @param {string} productSpecificationSysId - The specification to use in generating the object as sys_id
     * @returns {Object} - The TMF compliant product specification object
     **/
    generateProductSpecificationObj(productSpecificationSysId) {
        var recordGr = this.utils.getRecordFromSysId('sn_prd_pm_product_specification', productSpecificationSysId);
        if (!recordGr) {
            return null;
        }

        var obj = {};

        if (recordGr.getValue('external_id') !== null) {
            obj.id = recordGr.getValue('external_id');
        } else {
            obj.id = recordGr.getValue('initial_version');
        }
        obj.internalVersion = recordGr.getValue('version');
        obj.name = recordGr.getValue('name');
        if (recordGr.getValue('external_version') !== null) {
            obj.version = recordGr.getValue('external_version');
        }
        obj['@type'] = 'ProductSpecificationRef';
        return obj;
    },

    /**
     * Generates the TMF compliant location object
     * 
     * @param {string} locationSysId - The location to use in generating the object as sys_id
     * @returns {Object} - The TMF compliant location object
     **/
    generatePlaceObj(locationSysId) {
        var obj = {};
        obj.id = this.getRecordIdentifier('cmn_location', locationSysId);
        obj['@type'] = 'Place';
        return obj;
    },

    /**
     * Determines if an item has product item relationships
     * 
     * @param {GlideRecord Object} orderableItemGr - The item to check
     * @returns {boolean} - True/False denoting if the item has product item relationships
     **/
    checkForProductOrderItemRelationship(orderableItemGr) {
        var productOrderItemRelationshipsGr = this.utils.getRecords('x_648117_tmf_mock_item_relationship', 'source_item=' + orderableItemGr.getUniqueValue() + '^relationship_class=productOrderItemRelationship');
        if (productOrderItemRelationshipsGr) {
            return true;
        }
        return false;
    },

    /**
     * Generates the TMF compliant product item relationship array
     * 
     * @param {GlideRecord Object} orderableItemGr - The item to use in generating the array
     * @returns {Array} - The TMF compliant product item relationship array
     **/
    generateProductOrderItemRelationshipArray(orderableItemGr) {
        var array = [];
        var productOrderItemRelationshipsGr = this.utils.getRecords('x_648117_tmf_mock_item_relationship', 'source_item=' + orderableItemGr.getUniqueValue() + '^relationship_class=productOrderItemRelationship');
        if (productOrderItemRelationshipsGr) {
            while (productOrderItemRelationshipsGr.next()) {
                array.push({
                    "id": productOrderItemRelationshipsGr.getValue('target_item'),
                    "relationshipType": productOrderItemRelationshipsGr.getValue('relationship_type')
                });
            }
        }
        return array;
    },

    /**
     * Determines if an item has product relationships
     * 
     * @param {GlideRecord Object} orderableItemGr - The item to check
     * @returns {boolean} - True/False denoting if the item has product relationships
     **/
    checkForProductRelationship(orderableItemGr) {
        var productRelationshipsGr = this.utils.getRecords('x_648117_tmf_mock_item_relationship', 'source_item=' + orderableItemGr.getUniqueValue() + '^relationship_class=productRelationship');
        if (productRelationshipsGr) {
            return true;
        }
        return false;
    },

    /**
     * Generates the TMF compliant product relationship array
     * 
     * @param {GlideRecord Object} orderableItemGr - The item to use in generating the array
     * @returns {Array} - The TMF compliant product relationship array
     **/
    generateProductRelationshipArray(orderableItemGr) {
        var array = [];
        var productRelationshipsGr = this.utils.getRecords('x_648117_tmf_mock_item_relationship', 'source_item=' + orderableItemGr.getUniqueValue() + '^relationship_class=productRelationship');
        if (productRelationshipsGr) {
            while (productRelationshipsGr.next()) {
                array.push({
                    "id": this.getRecordIdentifier('sn_prd_invt_product_inventory', productRelationshipsGr.getValue('product_inventory')),
                    "relationshipType": productRelationshipsGr.getValue('relationship_type')
                });
            }
        }
        return array;
    },

    /**
     * Determines if an item has related parties
     * 
     * @param {GlideRecord object} orderableItemGr - The item to check
     * @returns {boolean} - True/False denoting if the item has related parties
     **/
    checkForProductRelatedParty(orderableItemGr) {
        var relatedPartyGr = this.utils.getRecords('x_648117_tmf_mock_related_party', 'item=' + orderableItemGr.getUniqueValue());
        if (relatedPartyGr) {
            return true;
        }
        return false;
    },

    /**
     * Generates the TMF compliant product related party array
     * 
     * @param {GlideRecord object} orderableItemGr - The item to use in generating the array
     * @returns {Array} - The TMF compliant product related party array
     **/
    generateProductRelatedPartyArray(orderableItemGr) {
        var array = [];
        var relatedPartyGr = this.utils.getRecords('x_648117_tmf_mock_related_party', 'item=' + orderableItemGr.getUniqueValue());
        if (relatedPartyGr) {
            while (relatedPartyGr.next()) {
                array.push({
                    "email": relatedPartyGr.getValue('email'),
                    "firstName": relatedPartyGr.getValue('first_name'),
                    "lastName": relatedPartyGr.getValue('last_name'),
                    "phone": relatedPartyGr.getValue('phone'),
                    "@referredType": "OrderLineItemContact",
                    "@type": "RelatedParty"
                });
            }
        }
        return array;
    },

    /**
     * Determines if an item has price attributes
     * 
     * @param {GlideRecord Object} orderableItemGr - The item to check
     * @returns {boolean} - True/False denoting if the item has price attributes
     **/
    checkForPrice(orderableItemGr) {
        var mrc = orderableItemGr.getValue('mrc');
        var nrc = orderableItemGr.getValue('nrc');

        if (mrc === "0" && nrc === "0") {
            return false;
        }
        return true;
    },

    /**
     * Generates the TMF compliant product price object
     * 
     * @param {GlideRecord Object} orderableItemGr - The item to use in generating the object
	 * @param {string} currencyFieldName - The field name on the item table denoting the currency
     * @returns {Object} - The TMF compliant product price object
     **/
    generateItemPriceObj(orderableItemGr, currencyFieldName) {
        if (!orderableItemGr.isValidField(currencyFieldName)) {
            return null;
        }

        var obj = {};
        obj.price = {
            taxIncludedAmount: {
                unit: orderableItemGr[currencyFieldName].getCurrencyCode(),
                value: orderableItemGr.getValue(currencyFieldName)
            }
        };

        if (currencyFieldName === 'mrc') {
            obj.priceType = 'recurring';
            obj.recurringChargePeriod = orderableItemGr.getValue('recurring_charge_period');
        } else if (currencyFieldName === 'nrc') {
            obj.priceType = 'nonRecurring';
        }
        return obj;
    },

    /**
     * Generates the TMF compliant product offering object
     * 
     * @param {string} productOfferingSysId - The item to use in generating the object as sys_id
     * @returns {Object} - The TMF compliant product offering object
     **/
    generateProductOfferingObj(productOfferingSysId) {
        var recordGr = this.utils.getRecordFromSysId('sn_prd_pm_product_offering', productOfferingSysId);
        if (!recordGr) {
            return null;
        }

        var obj = {};
        if (recordGr.getValue('external_id') !== null) {
            obj.id = recordGr.getValue('external_id');
        } else {
            obj.id = recordGr.getValue('initial_version');
        }
        obj.internalVersion = recordGr.getValue('version');
        obj.name = recordGr.getValue('name');
        if (recordGr.getValue('external_version') !== null) {
            obj.version = recordGr.getValue('external_version');
        }
        return obj;
    },

    /**
     * Gets the record identifier from a record. The identifier is an external id or sys_id
     * 
     * @param {string} tableName - Name of the table to query
     * @param {string} sysId - Record to use in the query as sys_id
     * @returns {string} - The record identifier
     **/
    getRecordIdentifier(tableName, sysId) {
        var externalIdFieldNames = Constants.EXTERNAL_ID_FIELD_NAMES;

        var recordGr = this.utils.getRecordFromSysId(tableName, sysId);
        if (recordGr) {
			
			// Return external ID if the passed in table has an external ID field
            for (var i = 0; i < externalIdFieldNames.length; i++) {
                if (recordGr.isValidField(externalIdFieldNames[i])) {
                    if (!recordGr[externalIdFieldNames[i]].nil()) {
                        return recordGr.getValue(externalIdFieldNames[i]);
                    }
                }
            }
            return recordGr.getUniqueValue(); // Return unique value if no external ID present
        }
        return null;
    },
    type: 'TMFPayloadUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-06-23 13:33:19</sys_created_on>
        <sys_id>dd6569a247232110acf69a21336d4300</sys_id>
        <sys_mod_count>70</sys_mod_count>
        <sys_name>TMFPayloadUtils</sys_name>
        <sys_package display_value="TMF Mock Payload Generator" source="x_648117_tmf_mock">3b03be1447232110acf69a21336d4362</sys_package>
        <sys_policy/>
        <sys_scope display_value="TMF Mock Payload Generator">3b03be1447232110acf69a21336d4362</sys_scope>
        <sys_update_name>sys_script_include_dd6569a247232110acf69a21336d4300</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-10-25 15:24:37</sys_updated_on>
    </sys_script_include>
</record_update>
